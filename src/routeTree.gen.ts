/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects/index'
import { Route as EmployeesIndexRouteImport } from './routes/employees/index'
import { Route as ProjectsProjectIdIndexRouteImport } from './routes/projects/$projectId/index'
import { Route as EmployeesEmployeeIdIndexRouteImport } from './routes/employees/$employeeId/index'
import { Route as ProjectsProjectIdEmployeesRouteImport } from './routes/projects/$projectId/employees'
import { Route as EmployeesEmployeeIdProjectsRouteImport } from './routes/employees/$employeeId/projects'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRouteImport,
} as any)
const EmployeesIndexRoute = EmployeesIndexRouteImport.update({
  id: '/employees/',
  path: '/employees/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsProjectIdIndexRoute = ProjectsProjectIdIndexRouteImport.update({
  id: '/projects/$projectId/',
  path: '/projects/$projectId/',
  getParentRoute: () => rootRouteImport,
} as any)
const EmployeesEmployeeIdIndexRoute =
  EmployeesEmployeeIdIndexRouteImport.update({
    id: '/employees/$employeeId/',
    path: '/employees/$employeeId/',
    getParentRoute: () => rootRouteImport,
  } as any)
const ProjectsProjectIdEmployeesRoute =
  ProjectsProjectIdEmployeesRouteImport.update({
    id: '/projects/$projectId/employees',
    path: '/projects/$projectId/employees',
    getParentRoute: () => rootRouteImport,
  } as any)
const EmployeesEmployeeIdProjectsRoute =
  EmployeesEmployeeIdProjectsRouteImport.update({
    id: '/employees/$employeeId/projects',
    path: '/employees/$employeeId/projects',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/employees': typeof EmployeesIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/employees/$employeeId/projects': typeof EmployeesEmployeeIdProjectsRoute
  '/projects/$projectId/employees': typeof ProjectsProjectIdEmployeesRoute
  '/employees/$employeeId': typeof EmployeesEmployeeIdIndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/employees': typeof EmployeesIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/employees/$employeeId/projects': typeof EmployeesEmployeeIdProjectsRoute
  '/projects/$projectId/employees': typeof ProjectsProjectIdEmployeesRoute
  '/employees/$employeeId': typeof EmployeesEmployeeIdIndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/employees/': typeof EmployeesIndexRoute
  '/projects/': typeof ProjectsIndexRoute
  '/employees/$employeeId/projects': typeof EmployeesEmployeeIdProjectsRoute
  '/projects/$projectId/employees': typeof ProjectsProjectIdEmployeesRoute
  '/employees/$employeeId/': typeof EmployeesEmployeeIdIndexRoute
  '/projects/$projectId/': typeof ProjectsProjectIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/employees'
    | '/projects'
    | '/employees/$employeeId/projects'
    | '/projects/$projectId/employees'
    | '/employees/$employeeId'
    | '/projects/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/employees'
    | '/projects'
    | '/employees/$employeeId/projects'
    | '/projects/$projectId/employees'
    | '/employees/$employeeId'
    | '/projects/$projectId'
  id:
    | '__root__'
    | '/'
    | '/employees/'
    | '/projects/'
    | '/employees/$employeeId/projects'
    | '/projects/$projectId/employees'
    | '/employees/$employeeId/'
    | '/projects/$projectId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EmployeesIndexRoute: typeof EmployeesIndexRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  EmployeesEmployeeIdProjectsRoute: typeof EmployeesEmployeeIdProjectsRoute
  ProjectsProjectIdEmployeesRoute: typeof ProjectsProjectIdEmployeesRoute
  EmployeesEmployeeIdIndexRoute: typeof EmployeesEmployeeIdIndexRoute
  ProjectsProjectIdIndexRoute: typeof ProjectsProjectIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/employees/': {
      id: '/employees/'
      path: '/employees'
      fullPath: '/employees'
      preLoaderRoute: typeof EmployeesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$projectId/': {
      id: '/projects/$projectId/'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/employees/$employeeId/': {
      id: '/employees/$employeeId/'
      path: '/employees/$employeeId'
      fullPath: '/employees/$employeeId'
      preLoaderRoute: typeof EmployeesEmployeeIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$projectId/employees': {
      id: '/projects/$projectId/employees'
      path: '/projects/$projectId/employees'
      fullPath: '/projects/$projectId/employees'
      preLoaderRoute: typeof ProjectsProjectIdEmployeesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/employees/$employeeId/projects': {
      id: '/employees/$employeeId/projects'
      path: '/employees/$employeeId/projects'
      fullPath: '/employees/$employeeId/projects'
      preLoaderRoute: typeof EmployeesEmployeeIdProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EmployeesIndexRoute: EmployeesIndexRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
  EmployeesEmployeeIdProjectsRoute: EmployeesEmployeeIdProjectsRoute,
  ProjectsProjectIdEmployeesRoute: ProjectsProjectIdEmployeesRoute,
  EmployeesEmployeeIdIndexRoute: EmployeesEmployeeIdIndexRoute,
  ProjectsProjectIdIndexRoute: ProjectsProjectIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
